from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler, PicklePersistence

from credentials import ChatGPT_TOKEN, Bot_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler

"–ë–∏–ª–¥–µ—Ä –±–æ—Ç–∞"
persistence = PicklePersistence(filepath='bot_data')
app = ApplicationBuilder().token(f"{Bot_TOKEN}").persistence(persistence).build()
chat_gpt = ChatGptService(ChatGPT_TOKEN)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message('start')
    await send_text(update, context, text)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'menu': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translator': '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º',
        'idea': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π',
        'word': '–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º',
        'end': '–ü—Ä–µ—Ä–≤–∞—Ç—å —Å–µ–∞–Ω—Å —Å–≤—è–∑–∏ —Å gpt'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await send_text(update, context, update.message.text)


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç
    """
    prompt = load_prompt('random')
    message = load_message('random')

    await send_image(update, context, name='random')
    message = await send_text(update, context, message)
    answer = await chat_gpt.send_question(prompt, message_text="")
    await message.edit_text(answer)

async def random_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç
    """
    prompt = load_prompt('random_word')
    message = load_message('random_word')

    await send_image(update, context, name='random')
    message = await send_text(update, context, message)
    answer = await chat_gpt.send_question(prompt, message_text="")
    await message.edit_text(answer)


GPT, HANDLE_GPT_QUESTION = range(2)
async def handle_gpt_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç GPT-—Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /gpt –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
    """
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, name='gpt')
    await send_text(update, context, message)
    return HANDLE_GPT_QUESTION  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

async def handle_gpt_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ GPT.
    """
    user_question = update.message.text
    message = await send_text(update, context, text='–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer = await chat_gpt.add_message(message_text=user_question)
    await message.edit_text(answer)
    return HANDLE_GPT_QUESTION  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

TALK, HANDLE_TALK_PERSON, HANDLE_TALK_CONVERSATION = range(3)
async def handle_talk_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Talk-—Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /talk –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
    """
    buttons = [
        [InlineKeyboardButton("–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω", callback_data='talk_cobain')],
        [InlineKeyboardButton("–°—Ç–∏–≤–µ–Ω –•–æ–∫–∫–∏–Ω–≥", callback_data='talk_hawking')],
        [InlineKeyboardButton("–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ", callback_data='talk_nietzsche')],
        [InlineKeyboardButton("–ö–æ—Ä–æ–ª–µ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞ II", callback_data='talk_queen')],
        [InlineKeyboardButton("–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", callback_data='talk_tolkien')]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    message = load_message('talk')
    await send_image(update, context, name='talk')
    await update.message.reply_text(message, reply_markup=keyboard)
    return HANDLE_TALK_PERSON

async def handle_talk_person(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ GPT.
    """
    btn = update.callback_query.data
    await update.callback_query.answer()  # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è
    personalities = {
        'talk_cobain': 'talk_cobain',
        'talk_hawking': 'talk_hawking',
        'talk_nietzsche': 'talk_nietzsche',
        'talk_queen': 'talk_queen',
        'talk_tolkien': 'talk_tolkien',
    }

    if btn in personalities:
        person_key = personalities[btn]
        prompt = load_prompt(person_key)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π prompt
        chat_gpt.set_prompt(prompt)
        await send_image(update, context, name=person_key)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
        greeting = await chat_gpt.add_message(message_text="–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ –ø–æ–∑–¥–∞—Ä–æ–≤–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –ª–∞ –±—ã –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å")
        await send_text(update, context, greeting)

        return HANDLE_TALK_CONVERSATION  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
    else:
        await handle_talk_entry(update, context)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ callback_data –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        return HANDLE_TALK_PERSON  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ª–∏—á–Ω–æ—Å—Ç–∏

async def handle_talk_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_question = update.message.text
    message = await send_text(update, context, text='–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer = await chat_gpt.add_message(message_text=user_question)
    await message.edit_text(answer)
    return HANDLE_TALK_CONVERSATION  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

QUIZ, HANDLE_QUIZ_THEME, HANDLE_QUIZ_ANSWER, HANDLE_QUIZ_MORE = range(4)

# BEST_SCORE = app.persistence.get_bot_data().get("best_score", 0)
# # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
# def update_best_score(context, current_score):
#     global BEST_SCORE
#     if current_score > BEST_SCORE:
#         BEST_SCORE = current_score
#         # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ bot_data
#         context.bot_data["best_score"] = BEST_SCORE

async def handle_quiz_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç GPT-—Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /gpt –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
    """
    global BEST_SCORE
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º BEST_SCORE –∏–∑ bot_data –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    bot_data = await app.persistence.get_bot_data()
    context.bot_data["best_score"] = bot_data.get("best_score", 0)
    BEST_SCORE = context.bot_data.get("best_score", 0)
    context.user_data['current_right_score'] = 0

    buttons = [
        [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='quiz_prog')],
        [InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data='quiz_math')],
        [InlineKeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è", callback_data='quiz_biology')],
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    message = load_message('quiz')
    await send_image(update, context, name='quiz')
    await update.message.reply_text(message, reply_markup=keyboard)
    return HANDLE_QUIZ_THEME  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

async def handle_quiz_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    btn = update.callback_query.data
    await update.callback_query.answer()  # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    themes = {
        'quiz_prog': 'quiz_prog',
        'quiz_math': 'quiz_math',
        'quiz_biology': 'quiz_biology',
    }

    if btn in themes:
        theme = themes[btn]
        context.user_data['theme'] = theme
        context.user_data['current_right_score'] = 0
        context.user_data['current_unright_score'] = 0

        prompt = load_prompt('quiz')
        chat_gpt.set_prompt(prompt)
        start_quiz = await chat_gpt.add_message(message_text=theme)
        await send_image(update, context, name='quiz')
        await send_text(update, context, start_quiz)
        return HANDLE_QUIZ_ANSWER  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    else:
        await handle_talk_entry(update, context)
        return HANDLE_QUIZ_THEME

async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global BEST_SCORE
    user_question = update.message.text
    message = await send_text(update, context, text='–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer = await chat_gpt.add_message(message_text=user_question)

    if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" in answer:
        context.user_data['current_right_score'] += 1
        update_best_score(context, context.user_data['current_right_score'])
    else:
        context.user_data['current_unright_score'] += 1

    buttons = [
        [InlineKeyboardButton("–ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data='quiz_more')]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    await message.edit_text(
        f"{answer} \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context.user_data['current_right_score']}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context.user_data['current_unright_score']}\n–õ—É—á—à–∏–π —Å—á–µ—Ç: {context.bot_data.get('best_score', 0)}",
        reply_markup=keyboard
    )
    return HANDLE_QUIZ_ANSWER # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤


async def handle_quiz_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    theme = context.user_data.get('theme')  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ user_data
    next_question = await chat_gpt.add_message(message_text=theme)
    await update.callback_query.edit_message_text(text=next_question)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å

    return HANDLE_QUIZ_ANSWER  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

def update_best_score(context, current_score):
    best_score = context.bot_data.get("best_score", 0)
    if current_score > best_score:
        context.bot_data["best_score"] = current_score
        context.application.persistence.update_bot_data(context.bot_data)

TRANSLATOR, HANDLE_TRANSLATOR_LANGUAGE, HANDLE_TRANSLATOR_PROCESS = range(3)
async def handle_translator_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data='translator_english')],
        [InlineKeyboardButton("–ú–∞–Ω–¥–∞—Ä–∏–Ω—Å–∫–∏–π", callback_data='translator_china')],
        [InlineKeyboardButton("–•–∏–Ω–¥–∏", callback_data='translator_hindi')],
        [InlineKeyboardButton("–ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data='translator_spain')],
        [InlineKeyboardButton("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", callback_data='translator_french')],
        [InlineKeyboardButton("–ê—Ä–∞–±—Å–∫–∏–π", callback_data='translator_arabic')],
        [InlineKeyboardButton("–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π", callback_data='translator_bengal')],
        [InlineKeyboardButton("–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", callback_data='translator_portugal')],
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='translator_russian')],
        [InlineKeyboardButton("–£—Ä–¥—É", callback_data='translator_urdu')],
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    message = load_message('translator')
    await send_image(update, context, name='translator')
    await update.message.reply_text(message, reply_markup=keyboard)
    return HANDLE_TRANSLATOR_LANGUAGE  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

async def handle_translator_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ GPT.
    """
    btn = update.callback_query.data
    await update.callback_query.answer()  # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è
    languages = {
        'translator_english': 'translator_english',
        'translator_china': 'translator_china',
        'translator_hindi': 'translator_hindi',
        'translator_spain': 'translator_spain',
        'translator_french': 'translator_french',
        'translator_arabic': 'translator_arabic',
        'translator_bengal': 'translator_bengal',
        'translator_portugal': 'translator_portugal',
        'translator_russian': 'translator_russian',
        'translator_urdu': 'translator_urdu',
    }

    if btn in languages:
        language_key = languages[btn]
        prompt = load_prompt('translator')
        chat_gpt.set_prompt(prompt)
        # await send_image(update, context, name=language_key)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
        greeting = await chat_gpt.add_message(
            message_text=f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {language_key}, –ü–æ–∑–¥–∞—Ä–æ–≤–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∞–ª –±—ã –Ω–æ—Å–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")
        await send_text(update, context, greeting)

        return HANDLE_TRANSLATOR_PROCESS  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
    else:
        await handle_translator_entry(update, context)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ callback_data –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        return HANDLE_TRANSLATOR_LANGUAGE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ª–∏—á–Ω–æ—Å—Ç–∏

async def handle_translator_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_question = update.message.text
    message = await send_text(update, context, text='–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer = await chat_gpt.add_message(message_text=user_question)
    await message.edit_text(answer)
    return HANDLE_TALK_CONVERSATION  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

IDEA, HANDLE_IDEA_GENERATOR = range(2)
async def handle_idea_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç GPT-—Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /gpt –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
    """
    prompt = load_prompt('idea')
    message = load_message('idea')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, name='idea')
    await send_text(update, context, message)
    return HANDLE_GPT_QUESTION  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

async def handle_idea_generator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ GPT.
    """
    user_question = update.message.text
    message = await send_text(update, context, text='–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer = await chat_gpt.add_message(message_text=user_question)
    await message.edit_text(answer)
    return HANDLE_GPT_QUESTION  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤










async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_text(update, context, text="–°–µ–∞–Ω—Å —Å–≤—è–∑–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    await menu(update, context)
    return ConversationHandler.END


# dialog = Dialog()
# dialog.mode = None
# # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"
app.add_handler(CommandHandler(
    command='start',
    callback=start))
app.add_handler(CommandHandler(
    command='menu',
    callback=menu))
app.add_handler(CommandHandler(
    command="random",
    callback=random_fact))
app.add_handler(CommandHandler(
    command="word",
    callback=random_word))

"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤"
conv_gpt = ConversationHandler(
    entry_points=[CommandHandler("gpt", handle_gpt_entry)],
    states={
        HANDLE_GPT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gpt_question)]
    },
    fallbacks=[
        CommandHandler("end", end_conversation)]
)
app.add_handler(conv_gpt)

conv_famous = ConversationHandler(
    entry_points=[CommandHandler("talk", handle_talk_entry)],
    states={
        HANDLE_TALK_PERSON: [CallbackQueryHandler(handle_talk_person, pattern='^talk_.*')],
        HANDLE_TALK_CONVERSATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_talk_conversation)]
    },
    fallbacks=[
        CommandHandler("end", end_conversation)]
)
app.add_handler(conv_famous)

conv_quiz = ConversationHandler(
    entry_points=[CommandHandler("quiz", handle_quiz_entry)],
    states={
        HANDLE_QUIZ_THEME: [CallbackQueryHandler(handle_quiz_theme, pattern='^quiz_.*')],
        HANDLE_QUIZ_ANSWER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quiz_answer),
            CallbackQueryHandler(handle_quiz_more, pattern='^quiz_more$')  # –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ï—â—ë –≤–æ–ø—Ä–æ—Å¬ª
        ]
    },
    fallbacks=[
        CommandHandler("end", end_conversation)]
)
app.add_handler(conv_quiz)

conv_translator = ConversationHandler(
    entry_points=[CommandHandler("translator", handle_translator_entry)],
    states={
        HANDLE_TRANSLATOR_LANGUAGE: [CallbackQueryHandler(handle_translator_language, pattern='^translator_.*')],
        HANDLE_TRANSLATOR_PROCESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translator_process)]
    },
    fallbacks=[
        CommandHandler("end", end_conversation)]
)
app.add_handler(conv_translator)

conv_idea = ConversationHandler(
    entry_points=[CommandHandler("idea", handle_idea_entry)],
    states={
        HANDLE_GPT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_idea_generator)]
    },
    fallbacks=[
        CommandHandler("end", end_conversation)]
)
app.add_handler(conv_idea)



# app.add_handler(CommandHandler(
#     command="gpt",
#     callback=gpt))

# app.add_handler(CommandHandler('start', start))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
# app.add_handler(CallbackQueryHandler(default_callback_handler))


"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞"
app.add_handler(MessageHandler(
    filters.TEXT &
    ~filters.COMMAND,
    echo))

app.run_polling()
